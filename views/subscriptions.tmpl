<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Subscriptions - PleFi</title>
    <style>
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f7f7f9;
            color: #2d3436;
            margin: 0;
            padding: 2rem;
        }
        .container {
            max-width: 1000px;
            margin: 0 auto;
        }
        h1 {
            font-size: 2.75rem;
            font-weight: 800;
            margin-bottom: 1.5rem;
            color: #2d3436;
            letter-spacing: -0.02em;
        }
        .subscription-list {
            display: grid;
            grid-template-columns: 1fr;
            gap: 1.5rem;
            margin-top: 2rem;
        }
        .subscription-card {
            background-color: #ffffff;
            border-radius: 12px;
            padding: 1.75rem;
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.06);
            position: relative;
        }
        .subscription-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }
        .product-name {
            font-size: 1.5rem;
            font-weight: 700;
            color: #2d3436;
        }
        .subscription-status {
            padding: 0.5rem 1rem;
            border-radius: 50px;
            font-size: 0.875rem;
            font-weight: 600;
            letter-spacing: 0.02em;
        }
        .status-active {
            background-color: #e3f9e5;
            color: #2b8a3e;
        }
        .status-past_due {
            background-color: #fff9db;
            color: #e67700;
        }
        .status-canceled {
            background-color: #fff5f5;
            color: #e03131;
        }
        .subscription-info {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin-top: 1.25rem;
            margin-bottom: 1.75rem;
            padding-top: 1.25rem;
            border-top: 1px solid #f1f3f5;
        }
        .info-item {
            display: flex;
            flex-direction: column;
        }
        .info-label {
            font-size: 0.85rem;
            color: #868e96;
            margin-bottom: 0.35rem;
            font-weight: 500;
        }
        .info-value {
            font-size: 1.125rem;
            font-weight: 600;
            color: #495057;
        }
        .subscription-actions {
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid #f1f3f5;
        }
        .btn {
            padding: 0.75rem 1.25rem;
            border-radius: 8px;
            font-size: 0.95rem;
            font-weight: 600;
            cursor: pointer;
            border: none;
            transition: all 0.2s ease;
        }
        .btn-cancel {
            background-color: #fff5f5;
            color: #e03131;
            border: 1px solid rgba(224, 49, 49, 0.2);
        }
        .btn-cancel:hover {
            background-color: #ffe3e3;
        }
        .btn-cancel-disabled {
            background-color: #f1f3f5;
            color: #adb5bd;
            border: 1px solid rgba(173, 181, 189, 0.2);
            cursor: not-allowed;
        }
        .btn-cancel-disabled:hover {
            background-color: #f1f3f5;
            transform: none;
        }
        .btn-primary {
            background-color: #4b6bfb;
            color: #ffffff;
            box-shadow: 0 4px 12px rgba(75, 107, 251, 0.15);
        }
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(75, 107, 251, 0.25);
            background-color: #3557fa;
        }
        .back-link {
            display: inline-flex;
            align-items: center;
            margin-bottom: 1.5rem;
            color: #4b6bfb;
            text-decoration: none;
            font-weight: 600;
            font-size: 1rem;
        }
        .back-link:hover {
            text-decoration: underline;
        }
        .no-subscriptions {
            background-color: #ffffff;
            border-radius: 12px;
            padding: 3rem 2rem;
            text-align: center;
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.06);
        }
        .no-subscriptions p {
            font-size: 1.1rem;
            color: #636e72;
            margin-bottom: 2rem;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 100;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
            backdrop-filter: blur(4px);
        }
        .modal-content {
            background-color: #ffffff;
            margin: 15% auto;
            padding: 2.5rem;
            border-radius: 12px;
            width: 80%;
            max-width: 500px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        }
        .modal-content h2 {
            font-size: 1.75rem;
            font-weight: 700;
            margin-bottom: 1rem;
            color: #2d3436;
        }
        .modal-content p {
            color: #636e72;
            font-size: 1.05rem;
            line-height: 1.6;
            margin-bottom: 0.75rem;
        }
        .modal-buttons {
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
            margin-top: 2rem;
        }
        .loading {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.8);
            z-index: 999;
            justify-content: center;
            align-items: center;
        }
        .loading-spinner {
            border: 4px solid rgba(75, 107, 251, 0.1);
            border-radius: 50%;
            border-top: 4px solid #4b6bfb;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        @media (max-width: 640px) {
            body {
                padding: 1.5rem;
            }
            .subscription-card {
                padding: 1.25rem;
            }
            .subscription-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.75rem;
            }
            .subscription-info {
                grid-template-columns: 1fr;
                gap: 1rem;
            }
            .modal-content {
                width: 90%;
                padding: 1.5rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <a href="/" class="back-link">‚Üê Back to Home</a>
        <h1>My Subscriptions</h1>
        
        <div id="subscriptions-container" class="subscription-list">
            <div class="loading" id="loading">
                <div class="loading-spinner"></div>
            </div>
            <!-- Subscriptions will be loaded here via JavaScript -->
        </div>
    </div>

    <!-- Cancellation Modal -->
    <div id="cancelModal" class="modal">
        <div class="modal-content">
            <h2>Cancel Subscription</h2>
            <p>Are you sure you want to cancel this subscription?</p>
            <p>You will continue to have access until the end of your current billing period.</p>
            <div class="modal-buttons">
                <button id="confirmCancelBtn" class="btn btn-cancel">Yes, Cancel Subscription</button>
                <button id="closeCancelModal" class="btn btn-primary">Keep My Subscription</button>
            </div>
        </div>
    </div>

    <script>
        // DOM Elements
        const subscriptionsContainer = document.getElementById('subscriptions-container');
        const loadingElement = document.getElementById('loading');
        const cancelModal = document.getElementById('cancelModal');
        const closeCancelModalBtn = document.getElementById('closeCancelModal');
        const confirmCancelBtn = document.getElementById('confirmCancelBtn');
        
        // Current subscription to cancel
        let currentSubscriptionId = null;

        // Format date from timestamp
        function formatDate(timestamp) {
            if (!timestamp) return 'N/A';
            return new Date(timestamp * 1000).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
        }

        // Fetch subscriptions from API
        async function fetchSubscriptions() {
            loadingElement.style.display = 'flex';
            
            try {
                const response = await fetch('/api/v1/stripe/subscriptions');
                
                if (!response.ok) {
                    throw new Error('Failed to fetch subscriptions');
                }
                
                const data = await response.json();
                
                if (data.status === 'success' && data.subscriptions) {
                    renderSubscriptions(data.subscriptions);
                } else {
                    subscriptionsContainer.innerHTML = '<div class="no-subscriptions"><p>No subscriptions found</p></div>';
                }
            } catch (error) {
                console.error('Error fetching subscriptions:', error);
                subscriptionsContainer.innerHTML = `<div class="no-subscriptions"><p>Error loading subscriptions: ${error.message}</p></div>`;
            } finally {
                loadingElement.style.display = 'none';
            }
        }

        // Render subscriptions to the page
        function renderSubscriptions(subscriptions) {
            if (!subscriptions.length) {
                subscriptionsContainer.innerHTML = `
                    <div class="no-subscriptions">
                        <p>You don't have any active subscriptions yet.</p>
                        <a href="/stripe/checkout" class="btn btn-primary">Subscribe Now</a>
                    </div>
                `;
                return;
            }
            
            const subscriptionsHTML = subscriptions.map(sub => {
                // Extract product name and price
                let productName = 'Plex Subscription';
                let priceName = '';
                
                if (sub.items && sub.items.data.length > 0) {
                    const plan = sub.items.data[0].plan;
                    if (plan.product && typeof plan.product === 'object') {
                        productName = plan.product.name || 'Plex Subscription';
                    }
                    
                    // Format price
                    const amount = (plan.amount / 100).toFixed(2);
                    const interval = plan.interval;
                    priceName = `$${amount} / ${interval}`;
                }
                
                // Determine status class
                let statusClass = '';
                let statusText = sub.status;
                
                // Special handling for active but scheduled to cancel
                if (sub.status === 'active' && sub.cancel_at_period_end) {
                    statusClass = 'status-past_due'; // Use warning (yellow) style
                    statusText = 'Ending';
                } else {
                    switch (sub.status) {
                        case 'active':
                            statusClass = 'status-active';
                            break;
                        case 'past_due':
                            statusClass = 'status-past_due';
                            break;
                        case 'canceled':
                            statusClass = 'status-canceled';
                            break;
                        default:
                            statusClass = 'status-active';
                    }
                }
                
                // Get correct next billing date from items data
                let nextBillingDate = 'N/A';
                if (sub.items && sub.items.data.length > 0) {
                    nextBillingDate = formatDate(sub.items.data[0].current_period_end);
                }
                
                // Get subscription creation date
                const creationDate = formatDate(sub.created);
                
                // Determine billing date label based on cancellation status
                const billingDateLabel = sub.cancel_at_period_end ? 'Access Until' : 'Next Billing Date';
                
                return `
                    <div class="subscription-card">
                        <div class="subscription-header">
                            <div class="product-name">${productName}</div>
                            <div class="subscription-status ${statusClass}">${statusText}</div>
                        </div>
                        <div class="subscription-info">
                            <div class="info-item">
                                <span class="info-label">Created On</span>
                                <span class="info-value">${creationDate}</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Price</span>
                                <span class="info-value">${priceName}</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">${billingDateLabel}</span>
                                <span class="info-value">${nextBillingDate}</span>
                            </div>
                        </div>
                        ${sub.status === 'active' ? `
                            <div class="subscription-actions">
                                <button class="btn ${sub.cancel_at_period_end ? 'btn-cancel-disabled' : 'btn-cancel'}" 
                                        onclick="${sub.cancel_at_period_end ? '' : `showCancelModal('${sub.id}')`}"
                                        ${sub.cancel_at_period_end ? 'disabled' : ''}>
                                    ${sub.cancel_at_period_end ? 'Cancelled' : 'Cancel Subscription'}
                                </button>
                            </div>
                        ` : ''}
                    </div>
                `;
            }).join('');
            
            subscriptionsContainer.innerHTML = subscriptionsHTML;
        }

        // Show cancel confirmation modal
        function showCancelModal(subscriptionId) {
            currentSubscriptionId = subscriptionId;
            cancelModal.style.display = 'block';
        }

        // Close modal
        closeCancelModalBtn.addEventListener('click', function() {
            cancelModal.style.display = 'none';
        });

        // Handle cancel subscription
        confirmCancelBtn.addEventListener('click', async function() {
            if (!currentSubscriptionId) return;
            
            loadingElement.style.display = 'flex';
            
            try {
                const response = await fetch('/api/v1/stripe/cancel-subscription', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ subscription_id: currentSubscriptionId })
                });
                
                const data = await response.json();
                
                if (data.status === 'success') {
                    // Refresh subscriptions
                    fetchSubscriptions();
                } else {
                    alert('Error: ' + (data.error || 'Failed to cancel subscription'));
                }
            } catch (error) {
                console.error('Error canceling subscription:', error);
                alert('Error: ' + error.message);
            } finally {
                cancelModal.style.display = 'none';
                loadingElement.style.display = 'none';
            }
        });

        // Close modal when clicking outside
        window.onclick = function(event) {
            if (event.target === cancelModal) {
                cancelModal.style.display = 'none';
            }
        };

        // Load subscriptions when page loads
        document.addEventListener('DOMContentLoaded', fetchSubscriptions);
    </script>
</body>
</html>
