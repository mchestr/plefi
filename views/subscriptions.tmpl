<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Subscriptions - PleFi</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #1e1e2e;
            color: #cdd6f4;
            margin: 0;
            padding: 2rem;
        }
        .container {
            max-width: 1000px;
            margin: 0 auto;
        }
        h1 {
            font-size: 2.5rem;
            margin-bottom: 1rem;
            background: linear-gradient(90deg, #f38ba8, #fab387, #f9e2af, #a6e3a1, #74c7ec, #cba6f7);
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        .subscription-list {
            display: grid;
            grid-template-columns: 1fr;
            gap: 1rem;
            margin-top: 2rem;
        }
        .subscription-card {
            background-color: #313244;
            border-radius: 10px;
            padding: 1.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            position: relative;
        }
        .subscription-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }
        .product-name {
            font-size: 1.5rem;
            font-weight: bold;
            color: #a6e3a1;
        }
        .subscription-status {
            padding: 0.35rem 0.75rem;
            border-radius: 50px;
            font-size: 0.9rem;
            font-weight: 500;
        }
        .status-active {
            background-color: rgba(166, 227, 161, 0.2);
            color: #a6e3a1;
        }
        .status-past_due {
            background-color: rgba(249, 226, 175, 0.2);
            color: #f9e2af;
        }
        .status-canceled {
            background-color: rgba(243, 139, 168, 0.2);
            color: #f38ba8;
        }
        .subscription-info {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
            margin-bottom: 1.5rem;
        }
        .info-item {
            display: flex;
            flex-direction: column;
        }
        .info-label {
            font-size: 0.85rem;
            color: #a6adc8;
            margin-bottom: 0.25rem;
        }
        .info-value {
            font-size: 1.1rem;
            font-weight: 500;
        }
        .subscription-actions {
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
            margin-top: 1.5rem;
        }
        .btn {
            padding: 0.6rem 1rem;
            border-radius: 8px;
            font-size: 0.9rem;
            font-weight: 600;
            cursor: pointer;
            border: none;
            transition: all 0.2s;
        }
        .btn-cancel {
            background-color: rgba(243, 139, 168, 0.2);
            color: #f38ba8;
            border: 1px solid #f38ba8;
        }
        .btn-cancel:hover {
            background-color: rgba(243, 139, 168, 0.3);
        }
        .btn-primary {
            background: linear-gradient(90deg, #74c7ec, #89dceb);
            color: #1e1e2e;
        }
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(116, 199, 236, 0.3);
        }
        .back-link {
            display: inline-block;
            margin-bottom: 1rem;
            color: #74c7ec;
            text-decoration: none;
        }
        .back-link:hover {
            text-decoration: underline;
        }
        .no-subscriptions {
            background-color: #313244;
            border-radius: 10px;
            padding: 2rem;
            text-align: center;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 100;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.7);
        }
        .modal-content {
            background-color: #313244;
            margin: 15% auto;
            padding: 2rem;
            border-radius: 10px;
            width: 80%;
            max-width: 500px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        }
        .modal-buttons {
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
            margin-top: 1.5rem;
        }
        .loading {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            z-index: 999;
            justify-content: center;
            align-items: center;
        }
        .loading-spinner {
            border: 4px solid rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            border-top: 4px solid #a6e3a1;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <a href="/" class="back-link">‚Üê Back to Home</a>
        <h1>My Subscriptions</h1>
        
        <div id="subscriptions-container" class="subscription-list">
            <div class="loading" id="loading">
                <div class="loading-spinner"></div>
            </div>
            <!-- Subscriptions will be loaded here via JavaScript -->
        </div>
    </div>

    <!-- Cancellation Modal -->
    <div id="cancelModal" class="modal">
        <div class="modal-content">
            <h2>Cancel Subscription</h2>
            <p>Are you sure you want to cancel this subscription?</p>
            <p>You will continue to have access until the end of your current billing period.</p>
            <div class="modal-buttons">
                <button id="confirmCancelBtn" class="btn btn-cancel">Yes, Cancel Subscription</button>
                <button id="closeCancelModal" class="btn btn-primary">Keep My Subscription</button>
            </div>
        </div>
    </div>

    <script>
        // DOM Elements
        const subscriptionsContainer = document.getElementById('subscriptions-container');
        const loadingElement = document.getElementById('loading');
        const cancelModal = document.getElementById('cancelModal');
        const closeCancelModalBtn = document.getElementById('closeCancelModal');
        const confirmCancelBtn = document.getElementById('confirmCancelBtn');
        
        // Current subscription to cancel
        let currentSubscriptionId = null;

        // Format date from timestamp
        function formatDate(timestamp) {
            if (!timestamp) return 'N/A';
            return new Date(timestamp * 1000).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
        }

        // Fetch subscriptions from API
        async function fetchSubscriptions() {
            loadingElement.style.display = 'flex';
            
            try {
                const response = await fetch('/api/v1/subscriptions');
                
                if (!response.ok) {
                    throw new Error('Failed to fetch subscriptions');
                }
                
                const data = await response.json();
                
                if (data.status === 'success' && data.subscriptions) {
                    renderSubscriptions(data.subscriptions);
                } else {
                    subscriptionsContainer.innerHTML = '<div class="no-subscriptions"><p>No subscriptions found</p></div>';
                }
            } catch (error) {
                console.error('Error fetching subscriptions:', error);
                subscriptionsContainer.innerHTML = `<div class="no-subscriptions"><p>Error loading subscriptions: ${error.message}</p></div>`;
            } finally {
                loadingElement.style.display = 'none';
            }
        }

        // Render subscriptions to the page
        function renderSubscriptions(subscriptions) {
            if (!subscriptions.length) {
                subscriptionsContainer.innerHTML = `
                    <div class="no-subscriptions">
                        <p>You don't have any active subscriptions yet.</p>
                        <a href="/" class="btn btn-primary">Subscribe Now</a>
                    </div>
                `;
                return;
            }
            
            const subscriptionsHTML = subscriptions.map(sub => {
                // Extract product name and price
                let productName = 'Plex Subscription';
                let priceName = '';
                
                if (sub.items && sub.items.data.length > 0) {
                    const plan = sub.items.data[0].plan;
                    if (plan.product && typeof plan.product === 'object') {
                        productName = plan.product.name || 'Plex Subscription';
                    }
                    
                    // Format price
                    const amount = (plan.amount / 100).toFixed(2);
                    const interval = plan.interval;
                    priceName = `$${amount} / ${interval}`;
                }
                
                // Determine status class
                let statusClass = '';
                switch (sub.status) {
                    case 'active':
                        statusClass = 'status-active';
                        break;
                    case 'past_due':
                        statusClass = 'status-past_due';
                        break;
                    case 'canceled':
                        statusClass = 'status-canceled';
                        break;
                    default:
                        statusClass = 'status-active';
                }
                
                // Format next billing date
                const nextBillingDate = formatDate(sub.current_period_end);
                
                return `
                    <div class="subscription-card">
                        <div class="subscription-header">
                            <div class="product-name">${productName}</div>
                            <div class="subscription-status ${statusClass}">${sub.status}</div>
                        </div>
                        <div class="subscription-info">
                            <div class="info-item">
                                <span class="info-label">Price</span>
                                <span class="info-value">${priceName}</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Next Billing Date</span>
                                <span class="info-value">${nextBillingDate}</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Subscription ID</span>
                                <span class="info-value">${sub.id}</span>
                            </div>
                        </div>
                        ${sub.status === 'active' ? `
                            <div class="subscription-actions">
                                <button class="btn btn-cancel" onclick="showCancelModal('${sub.id}')">
                                    ${sub.cancel_at_period_end ? 'Cancellation Scheduled' : 'Cancel Subscription'}
                                </button>
                            </div>
                        ` : ''}
                    </div>
                `;
            }).join('');
            
            subscriptionsContainer.innerHTML = subscriptionsHTML;
        }

        // Show cancel confirmation modal
        function showCancelModal(subscriptionId) {
            currentSubscriptionId = subscriptionId;
            cancelModal.style.display = 'block';
        }

        // Close modal
        closeCancelModalBtn.addEventListener('click', function() {
            cancelModal.style.display = 'none';
        });

        // Handle cancel subscription
        confirmCancelBtn.addEventListener('click', async function() {
            if (!currentSubscriptionId) return;
            
            loadingElement.style.display = 'flex';
            
            try {
                const response = await fetch('/stripe/cancel-subscription', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ subscription_id: currentSubscriptionId })
                });
                
                const data = await response.json();
                
                if (data.status === 'success') {
                    // Refresh subscriptions
                    fetchSubscriptions();
                } else {
                    alert('Error: ' + (data.error || 'Failed to cancel subscription'));
                }
            } catch (error) {
                console.error('Error canceling subscription:', error);
                alert('Error: ' + error.message);
            } finally {
                cancelModal.style.display = 'none';
                loadingElement.style.display = 'none';
            }
        });

        // Close modal when clicking outside
        window.onclick = function(event) {
            if (event.target === cancelModal) {
                cancelModal.style.display = 'none';
            }
        };

        // Load subscriptions when page loads
        document.addEventListener('DOMContentLoaded', fetchSubscriptions);
    </script>
</body>
</html>
