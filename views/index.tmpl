<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PleFi</title>
    <style>
        :root {
            --bg-color: #f7f7f9;
            --container-bg: #ffffff;
            --text-color: #2d3436;
            --text-secondary: #636e72;
            --shadow-color: rgba(0, 0, 0, 0.06);
            --subtitle-bg: #f1f2f6;
            --subtitle-color: #636e72;
            --modal-overlay: rgba(0, 0, 0, 0.4);
            --btn-secondary-bg: #e9ecef;
            --btn-secondary-color: #495057;
            --btn-secondary-hover: #dee2e6;
            --logout-color: #868e96;
            --logout-hover-color: #495057;
            --logout-hover-bg: #f1f3f5;
            --icon-color: #2d3436;
        }

        .dark-mode {
            --bg-color: #1e272e;
            --container-bg: #2d3436;
            --text-color: #f1f2f6;
            --text-secondary: #d1d8e0;
            --shadow-color: rgba(0, 0, 0, 0.2);
            --subtitle-bg: #485460;
            --subtitle-color: #d2dae2;
            --modal-overlay: rgba(0, 0, 0, 0.7);
            --btn-secondary-bg: #485460;
            --btn-secondary-color: #f1f2f6;
            --btn-secondary-hover: #576574;
            --logout-color: #a5b1c2;
            --logout-hover-color: #d1d8e0;
            --logout-hover-bg: #3d4852;
            --icon-color: #ffffff;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100vh;
            overflow: hidden;
            transition: background-color 0.3s ease;
        }
        .container {
            text-align: center;
            padding: 3rem;
            border-radius: 12px;
            background-color: var(--container-bg);
            box-shadow: 0 8px 30px var(--shadow-color);
            max-width: 800px;
            width: 90%;
            transition: background-color 0.3s ease, box-shadow 0.3s ease;
        }
        h1 {
            font-size: 3.5rem;
            font-weight: 800;
            margin-bottom: 1rem;
            color: var(--text-color);
            letter-spacing: -0.02em;
            transition: color 0.3s ease;
        }
        p {
            font-size: 1.1rem;
            margin-bottom: 2rem;
            color: var(--text-secondary);
            line-height: 1.6;
            transition: color 0.3s ease;
        }
        .logo-container {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-bottom: 2rem;
        }
        .logo {
            max-width: 180px;
        }
        .subtitle {
            display: inline-block;
            padding: 0.5rem 1.5rem;
            background-color: var(--subtitle-bg);
            border-radius: 50px;
            color: var(--subtitle-color);
            font-weight: 600;
            margin-bottom: 2.5rem;
            font-size: 0.95rem;
            letter-spacing: 0.02em;
            transition: background-color 0.3s ease, color 0.3s ease;
        }
        .checkout-btn {
            background-color: #4b6bfb;
            color: #ffffff;
            border: none;
            padding: 0.9rem 2rem;
            border-radius: 8px;
            font-size: 1.1rem;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 4px 12px rgba(75, 107, 251, 0.15);
            margin-right: 1rem;
            text-decoration: none;
            display: inline-block;
        }
        .checkout-btn:hover {
            background-color: #3557fa;
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(75, 107, 251, 0.25);
        }
        .logout-btn {
            background-color: transparent;
            color: var(--logout-color);
            border: none;
            padding: 0.5rem 0.75rem;
            border-radius: 4px;
            font-size: 0.85rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            margin-top: 2rem;
            text-decoration: underline;
        }
        .logout-btn:hover {
            color: var(--logout-hover-color);
            background-color: var(--logout-hover-bg);
        }
        .cancel-btn {
            background-color: #ff7675;
            color: #ffffff;
            border: none;
            padding: 0.8rem 1.8rem;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 4px 12px rgba(255, 118, 117, 0.15);
            margin-top: 1rem;
        }
        .cancel-btn:hover {
            background-color: #ff6b6b;
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(255, 118, 117, 0.25);
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: var(--modal-overlay);
            backdrop-filter: blur(4px);
            transition: background-color 0.3s ease;
        }
        .modal-content {
            background-color: var(--container-bg);
            margin: 15% auto;
            padding: 2.5rem;
            border-radius: 12px;
            width: 80%;
            max-width: 480px;
            box-shadow: 0 20px 40px var(--shadow-color);
            text-align: center;
            transition: background-color 0.3s ease, box-shadow 0.3s ease;
        }
        .modal-content h2 {
            font-size: 1.75rem;
            font-weight: 700;
            margin-bottom: 1rem;
            color: var(--text-color);
            transition: color 0.3s ease;
        }
        .modal-content p {
            color: var(--text-secondary);
            margin-bottom: 0.75rem;
            transition: color 0.3s ease;
        }
        .modal-buttons {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin-top: 2rem;
        }
        .confirm-btn {
            background-color: #ff7675;
            color: #ffffff;
            border: none;
            padding: 0.8rem 1.8rem;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        .confirm-btn:hover {
            background-color: #ff6b6b;
        }
        .cancel-modal-btn {
            background-color: var(--btn-secondary-bg);
            color: var(--btn-secondary-color);
            border: none;
            padding: 0.8rem 1.8rem;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease, background-color 0.3s ease, color 0.3s ease;
        }
        .cancel-modal-btn:hover {
            background-color: var(--btn-secondary-hover);
        }
        .status-message {
            margin-top: 1.5rem;
            padding: 0.75rem 1.25rem;
            border-radius: 8px;
            display: none;
            font-weight: 500;
        }
        .success {
            background-color: #e3f9e5;
            color: #2b8a3e;
        }
        .error {
            background-color: #fff5f5;
            color: #e03131;
        }
        .button-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 0.75rem;
        }
        .greeting {
            margin-bottom: 2rem;
        }
        .theme-toggle {
            position: absolute;
            top: 20px;
            right: 20px;
            background-color: transparent;
            border: none;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 8px;
            border-radius: 50%;
            transition: background-color 0.2s ease;
            color: var(--icon-color);
        }
        .theme-toggle:hover {
            background-color: rgba(0, 0, 0, 0.1);
        }
        .dark-mode .theme-toggle:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }
        .theme-icon {
            width: 24px;
            height: 24px;
        }
        .donate-btn {
            background-color: #27ae60;
            color: #ffffff;
            border: none;
            padding: 0.9rem 2rem;
            border-radius: 8px;
            font-size: 1.1rem;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 4px 12px rgba(39, 174, 96, 0.15);
            text-decoration: none;
            display: inline-block;
            margin-top: 1rem;
        }
        .donate-btn:hover {
            background-color: #219653;
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(39, 174, 96, 0.25);
        }
        @media (max-width: 640px) {
            .container {
                padding: 2rem;
                width: 85%;
            }
            h1 {
                font-size: 2.5rem;
            }
        }
    </style>
</head>
<body>
    <button id="themeToggle" class="theme-toggle" aria-label="Toggle dark mode">
        <svg id="moonIcon" class="theme-icon" viewBox="0 0 24 24" style="display:none">
            <path fill="currentColor" d="M12 3a9 9 0 1 0 9 9c0-.46-.04-.92-.1-1.36a5.389 5.389 0 0 1-4.4 2.26 5.403 5.403 0 0 1-3.14-9.8c-.44-.06-.9-.1-1.36-.1z"/>
        </svg>
        <svg id="sunIcon" class="theme-icon" viewBox="0 0 24 24" style="display:none">
            <path fill="currentColor" d="M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zM2 13h2c.55 0 1-.45 1-1s-.45-1-1-1H2c-.55 0-1 .45-1 1s.45 1 1 1zm18 0h2c.55 0 1-.45 1-1s-.45-1-1-1h-2c-.55 0-1 .45-1 1s.45 1 1 1zM11 2v2c0 .55.45 1 1 1s1-.45 1-1V2c0-.55-.45-1-1-1s-1 .45-1 1zm0 18v2c0 .55.45 1 1 1s1-.45 1-1v-2c0-.55-.45-1-1-1s-1 .45-1 1zM5.99 4.58a.996.996 0 0 0-1.41 0 .996.996 0 0 0 0 1.41l1.06 1.06c.39.39 1.03.39 1.41 0s.39-1.03 0-1.41L5.99 4.58zm12.37 12.37a.996.996 0 0 0-1.41 0 .996.996 0 0 0 0 1.41l1.06 1.06c.39.39 1.03.39 1.41 0a.996.996 0 0 0 0-1.41l-1.06-1.06zm1.06-10.96a.996.996 0 0 0 0-1.41.996.996 0 0 0-1.41 0l-1.06 1.06c-.39.39-.39 1.03 0 1.41s1.03.39 1.41 0l1.06-1.06zM7.05 18.36a.996.996 0 0 0 0-1.41.996.996 0 0 0-1.41 0l-1.06 1.06c-.39.39-.39 1.03 0 1.41s1.03.39 1.41 0l1.06-1.06z"/>
        </svg>
    </button>

    <div class="container">
        {{ if .IsAuthenticated }}
            <div class="greeting">
                <h1>Hello, {{ .UserInfo.Username }}!</h1>
            </div>
        {{ else }}
            <h1>PleFi</h1>
            <div class="subtitle">Plex seamless subscription management</div>
        {{ end }}
        <div class="button-container">
            {{ if .IsAuthenticated }}
                <a href="/subscriptions" class="checkout-btn">Manage Subscriptions</a>
                <a href="/stripe/donation-checkout" class="donate-btn">Make a Donation</a>
            {{ else }}
                <button class="checkout-btn" onclick="window.location.href='/stripe/checkout?price_id={{ .PriceID }}'">Subscribe to Get Instant Access</button>
                <a href="/stripe/donation-checkout" class="donate-btn">Buy me a coffee</a>
            {{ end }}
        </div>
        
        {{ if .IsAuthenticated }}
        <button id="logoutButton" class="logout-btn">Sign out</button>
        {{ end }}
    </div>
    
    <!-- Confirmation Modal -->
    <div id="confirmationModal" class="modal">
        <div class="modal-content">
            <h2>Cancel Subscription</h2>
            <p>Are you sure you want to cancel your subscription?</p>
            <p>Your subscription will remain active until the end of the current billing cycle.</p>
            <div class="modal-buttons">
                <button id="confirmCancel" class="confirm-btn">Yes, Cancel</button>
                <button id="cancelModal" class="cancel-modal-btn">No, Keep Subscription</button>
            </div>
        </div>
    </div>

    <script>
        // Get modal elements
        const modal = document.getElementById('confirmationModal');
        const cancelBtn = document.getElementById('cancelSubscription');
        const confirmBtn = document.getElementById('confirmCancel');
        const closeModalBtn = document.getElementById('cancelModal');
        const statusMessage = document.getElementById('statusMessage');
        const logoutButton = document.getElementById('logoutButton');
        
        // Theme toggle elements
        const themeToggle = document.getElementById('themeToggle');
        const moonIcon = document.getElementById('moonIcon');
        const sunIcon = document.getElementById('sunIcon');
        
        // Check for saved theme preference or use preferred color scheme
        const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;
        const savedTheme = localStorage.getItem('theme');
        
        // Initialize theme
        if (savedTheme === 'dark' || (!savedTheme && prefersDarkMode)) {
            document.body.classList.add('dark-mode');
            moonIcon.style.display = 'none';
            sunIcon.style.display = 'block';
        } else {
            document.body.classList.remove('dark-mode');
            moonIcon.style.display = 'block';
            sunIcon.style.display = 'none';
        }
        
        // Theme toggle functionality
        themeToggle.addEventListener('click', () => {
            document.body.classList.toggle('dark-mode');
            
            if (document.body.classList.contains('dark-mode')) {
                localStorage.setItem('theme', 'dark');
                moonIcon.style.display = 'none';
                sunIcon.style.display = 'block';
            } else {
                localStorage.setItem('theme', 'light');
                moonIcon.style.display = 'block';
                sunIcon.style.display = 'none';
            }
        });

        // Handle logout via JavaScript
        if (logoutButton) {
            logoutButton.addEventListener('click', async function() {
                try {
                    const response = await fetch('/logout', {
                        method: 'GET',
                        headers: {
                            'Accept': 'application/json',
                        },
                        credentials: 'same-origin'
                    });
                    
                    if (response.ok) {
                        // Reload the page to reflect logged out state
                        window.location.reload();
                    } else {
                        console.error('Logout failed:', response.status);
                        // Fallback to direct navigation if the API call fails
                        window.location.href = '/logout';
                    }
                } catch (error) {
                    console.error('Logout error:', error);
                    // Fallback to direct navigation if there's an error
                    window.location.href = '/logout';
                }
            });
        }

        // Show modal when cancel button is clicked
        if (cancelBtn) {
            cancelBtn.addEventListener('click', function() {
                modal.style.display = 'block';
            });
        }

        // Hide modal when close button is clicked
        if (closeModalBtn) {
            closeModalBtn.addEventListener('click', function() {
                modal.style.display = 'none';
            });
        }

        // Hide modal when clicking outside of it
        window.addEventListener('click', function(event) {
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        });

        // Handle subscription cancellation
        if (confirmBtn) {
            confirmBtn.addEventListener('click', async function() {
                try {
                    const response = await fetch('/stripe/cancel-subscription', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    });
                    
                    const result = await response.json();
                    
                    if (response.ok) {
                        statusMessage.textContent = result.message;
                        statusMessage.className = 'status-message success';
                    } else {
                        statusMessage.textContent = result.error || 'Failed to cancel subscription';
                        statusMessage.className = 'status-message error';
                    }
                } catch (error) {
                    statusMessage.textContent = 'An error occurred while processing your request';
                    statusMessage.className = 'status-message error';
                }
                
                statusMessage.style.display = 'block';
                modal.style.display = 'none';
            });
        }
    </script>
</body>
</html>
